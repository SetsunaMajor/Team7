# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ FTR-actions ]
  pull_request:
    branches: [ FTR-actions ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  compile:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    container: openjdk

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2


      # Runs a set of commands using the runners shell
      - name: Compile code.
        run: |
          cd Projects/P1
          javac -cp "src/" src/*.java
          
TestPacManMove:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    container: openjdk

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2


      # Runs a set of commands using the runners shell
      - name: JUnit Test for PacMan's Move() function.
        run: |
          javac -cp "Projects/P1/src/" Projects/P1/src/*.java
          javac -cp "Projects/P1/tests/" Projects/P1/tests/*.java
          javac -cp "Projects/P1/tests/junit-4.10.jar:." Projects/P1/tests/*.java
          java -cp "Projects/P1/src/junit-4.10.jar:." org.junit.runner.JUnitCore TestPacmanMove
  
TestPacManInRange:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    container: openjdk

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2


      # Runs a set of commands using the runners shell
      - name: JUnit Test for Ghost's is_pacman_in_range() function.
        run: |
          javac -cp "Projects/P1/src/" Projects/P1/src/*.java
          javac -cp "Projects/P1/tests/" Projects/P1/tests/*.java
          javac -cp "Projects/P1/tests/junit-4.10.jar:." Projects/P1/tests/*.java
          java -cp "Projects/P1/src/junit-4.10.jar:." org.junit.runner.JUnitCore TestPacManInRange

TestMapEatCookie:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    container: openjdk

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2


      # Runs a set of commands using the runners shell
      - name: JUnit Test for Map's EatCookie() function.
        run: |
          javac -cp "Projects/P1/src/" Projects/P1/src/*.java
          javac -cp "Projects/P1/tests/" Projects/P1/tests/*.java
          javac -cp "Projects/P1/tests/junit-4.10.jar:." Projects/P1/tests/*.java
          java -cp "Projects/P1/src/junit-4.10.jar:." org.junit.runner.JUnitCore TestMapEatCookie
